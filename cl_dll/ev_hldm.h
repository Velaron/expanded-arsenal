//========= Copyright (c) 1996-2002, Valve LLC, All rights reserved. ============
//
// Purpose: 
//
// $NoKeywords: $
//=============================================================================

#pragma once
#if !defined ( EV_HLDMH )
#define EV_HLDMH

// bullet types
typedef	enum
{
	BULLET_NONE = 0,
	BULLET_PLAYER_9MM, // glock
	BULLET_PLAYER_MP5, // mp5
	BULLET_PLAYER_MP5A3,
	BULLET_PLAYER_DB,
	BULLET_PLAYER_PKM,
	BULLET_PLAYER_AK47,
	BULLET_PLAYER_FNFAL,
	BULLET_PLAYER_MP7,
	BULLET_PLAYER_AUTOSNIPER,
	BULLET_PLAYER_D50,
	BULLET_PLAYER_P904,
	BULLET_PLAYER_P226,
	BULLET_PLAYER_357, // python
	BULLET_PLAYER_M41,
	BULLET_PLAYER_BUCKSHOT, // shotgun
	BULLET_PLAYER_CROWBAR, // crowbar swipe
	BULLET_PLAYER_DEAGLE,
	BULLET_PLAYER_M1014,

	BULLET_MONSTER_9MM,
	BULLET_MONSTER_MP5,
	BULLET_MONSTER_12MM
}Bullet;

enum glock_e
{
	GLOCK_IDLE1 = 0,
	GLOCK_IDLE2,
	GLOCK_IDLE3,
	GLOCK_SHOOT,
	GLOCK_SHOOT_EMPTY,
	GLOCK_RELOAD,
	GLOCK_RELOAD_NOT_EMPTY,
	GLOCK_DRAW,
	GLOCK_HOLSTER,
	GLOCK_ADD_SILENCER
};

enum shotgun_e
{
	SHOTGUN_IDLE = 0,
	SHOTGUN_FIRE,
	SHOTGUN_FIRE2,
	SHOTGUN_RELOAD,
	SHOTGUN_PUMP,
	SHOTGUN_START_RELOAD,
	SHOTGUN_DRAW,
	SHOTGUN_HOLSTER,
	SHOTGUN_IDLE4,
	SHOTGUN_IDLE_DEEP
};

enum p904_e
{
	P904_LONGIDLE = 0,
	P904_IDLE1,
	P904_LAUNCH,
	P904_RELOAD,
	P904_DEPLOY,
	P904_FIRE1,
	P904_FIRE2,
	P904_FIRE3
};

enum beretta_e {
	
	BERETTA_LONGIDLE = 0,
	BERETTA_IDLE1,
	BERETTA_RELOAD,
	BERETTA_DEPLOY,
	BERETTA_FIRE1,
	BERETTA_FIRE2,
	BERETTA_FIRE3
};

enum p226_e {
	
	P226_LONGIDLE = 0,
	P226_IDLE1,
	P226_RELOAD,
	P226_DEPLOY,
	P226_FIRE1,
	P226_FIRE2,
	P226_FIRE3
};

enum ksg12_e {
	KSG12_IDLE = 0,
	KSG12_FIRE,
	KSG12_FIRE2,
	KSG12_RELOAD,
	KSG12_PUMP,
	KSG12_START_RELOAD,
	KSG12_DRAW,
	KSG12_HOLSTER,
	KSG12_IDLE4,
	KSG12_IDLE_DEEP
};

enum m1014_e {
	M1014_IDLE = 0,
	M1014_FIRE,
	M1014_FIRE2,
	M1014_RELOAD,
	M1014_PUMP,
	M1014_START_RELOAD,
	M1014_DRAW,
	M1014_HOLSTER,
	M1014_IDLE4,
	M1014_IDLE_DEEP
};

enum colt45_e {
	
	COLT45_LONGIDLE = 0,
	COLT45_IDLE1,
	COLT45_RELOAD,
	COLT45_DEPLOY,
	COLT45_FIRE1,
	COLT45_FIRE2,
	COLT45_FIRE3
};

enum mp5_e
{
	MP5_LONGIDLE = 0,
	MP5_IDLE1,
	MP5_LAUNCH,
	MP5_RELOAD,
	MP5_DEPLOY,
	MP5_FIRE1,
	MP5_FIRE2,
	MP5_FIRE3
};

enum m41_e
{
	M41_LONGIDLE = 0,
	M41_IDLE1,
	M41_LAUNCH,
	M41_RELOAD,
	M41_DEPLOY,
	M41_FIRE1,
	M41_FIRE2,
	M41_FIRE3
};

enum mp5a3_e
{
	MP5A3_LONGIDLE = 0,
	MP5A3_IDLE1,
	MP5A3_RELOAD,
	MP5A3_DEPLOY,
	MP5A3_FIRE1,
	MP5A3_FIRE2,
	MP5A3_FIRE3
};

enum ak47_e
{
	AK47_LONGIDLE = 0,
	AK47_IDLE1,
	AK47_RELOAD,
	AK47_DEPLOY,
	AK47_FIRE1,
	AK47_FIRE2,
	AK47_FIRE3
};

enum chaingun_e
{
	CHAINGUN_LONGIDLE = 0,
	CHAINGUN_IDLE1,
	CHAINGUN_RELOAD,
	CHAINGUN_DEPLOY,
	CHAINGUN_FIRE1,
	CHAINGUN_FIRE2,
	CHAINGUN_FIRE3
};

enum mp7_e
{
	MP7_LONGIDLE = 0,
	MP7_IDLE1,
	MP7_RELOAD,
	MP7_DEPLOY,
	MP7_FIRE1,
	MP7_FIRE2,
	MP7_FIRE3
};

enum fnfal_e
{
	FNFAL_LONGIDLE = 0,
	FNFAL_IDLE1,
	FNFAL_RELOAD,
	FNFAL_DEPLOY,
	FNFAL_FIRE1,
	FNFAL_FIRE2,
	FNFAL_FIRE3
};

enum autosniper_e
{
	AUTOSNIPER_LONGIDLE = 0,
	AUTOSNIPER_IDLE1,
	AUTOSNIPER_RELOAD,
	AUTOSNIPER_DEPLOY,
	AUTOSNIPER_FIRE1,
	AUTOSNIPER_FIRE2,
	AUTOSNIPER_FIRE3
};

enum d50_e
{
	D50_LONGIDLE = 0,
	D50_IDLE1,
	D50_RELOAD,
	D50_DEPLOY,
	D50_FIRE1,
	D50_FIRE2,
	D50_FIRE3
};

enum dbarrel_e
{
	DBARREL_LONGIDLE = 0,
	DBARREL_IDLE1,
	DBARREL_RELOAD,
	DBARREL_DEPLOY,
	DBARREL_FIRE1,
	DBARREL_FIRE2,
	DBARREL_FIRE3
};

enum python_e
{
	PYTHON_IDLE1 = 0,
	PYTHON_FIDGET,
	PYTHON_FIRE1,
	PYTHON_RELOAD,
	PYTHON_HOLSTER,
	PYTHON_DRAW,
	PYTHON_IDLE2,
	PYTHON_IDLE3
};

enum deagle_e {
	DEAGLE_LONGIDLE = 0,
	DEAGLE_IDLE1,
	DEAGLE_RELOAD,
	DEAGLE_DEPLOY,
	DEAGLE_FIRE1,
	DEAGLE_FIRE2,
	DEAGLE_FIRE3
};

enum pipe_e {
	PIPE_IDLE = 0,
	PIPE_DRAW,
	PIPE_HOLSTER,
	PIPE_ATTACK1HIT,
	PIPE_ATTACK1MISS,
	PIPE_ATTACK2MISS,
	PIPE_ATTACK2HIT,
	PIPE_ATTACK3MISS,
	PIPE_ATTACK3HIT
};

#define	GAUSS_PRIMARY_CHARGE_VOLUME	256// how loud gauss is while charging
#define GAUSS_PRIMARY_FIRE_VOLUME	450// how loud gauss is when discharged

enum gauss_e
{
	GAUSS_IDLE = 0,
	GAUSS_IDLE2,
	GAUSS_FIDGET,
	GAUSS_SPINUP,
	GAUSS_SPIN,
	GAUSS_FIRE,
	GAUSS_FIRE2,
	GAUSS_HOLSTER,
	GAUSS_DRAW
};

void EV_HLDM_GunshotDecalTrace( pmtrace_t *pTrace, char *decalName );
void EV_HLDM_DecalGunshot( pmtrace_t *pTrace, int iBulletType );
int EV_HLDM_CheckTracer( int idx, float *vecSrc, float *end, float *forward, float *right, int iBulletType, int iTracerFreq, int *tracerCount );
void EV_HLDM_FireBullets( int idx, float *forward, float *right, float *up, int cShots, float *vecSrc, float *vecDirShooting, float flDistance, int iBulletType, int iTracerFreq, int *tracerCount, float flSpreadX, float flSpreadY );
#endif // EV_HLDMH
